@page "/40000"
@using esportsMania.Models
@inject esportsMania.Services.JugadoresService JugadoresService
@inject esportsMania.Services.GanadoresService GanadoresService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Jugador Aleatorio</PageTitle>

<h1 class="text-primary text-center mb-2">Jugador Aleatorio</h1>

<!-- PUNTUACIÓN SIEMPRE VISIBLE -->
<div class="text-center mb-4">
    <h4>Puntuación total: @CalcularPuntuacion() / 40000</h4>
</div>

@if (cargando)
{
    <p class="text-center">Cargando jugadores...</p>
}
else if (!TodosAsignados())
{
    <div class="d-flex gap-3">
        <!-- Columna izquierda: Tabla de ganadores -->
        <div style="width: 250px;" class="d-flex flex-column align-items-center">
            <h4 class="text-center">Top 5 Ganadores</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>Posición</th>
                        <th>Nombre</th>
                        <th>Puntuación</th>
                    </tr>
                </thead>
                <tbody>
                    @if (topGanadores.Count == 0)
                    {
                        <tr>
                            <td colspan="3" class="text-center">No hay ganadores todavía</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var ganador in topGanadores.Select((g, index) => new { g, index }))
                        {
                            <tr>
                                <td>@(ganador.index + 1)</td>
                                <td>@ganador.g.NombreGanador</td>
                                <td>@ganador.g.Puntos</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <!-- Columna centro: jugador y botones -->
        <div class="flex-grow-1 d-flex flex-column align-items-center">
            @if (jugadorActual is not null)
            {
                <div style="width: 100px; height: 150px;">
                    <img src="@jugadorActual.FotoJugador" class="card-img-top" alt="@jugadorActual.Nombre" style="width: 100px; height: 100px; object-fit: cover;">
                    <div class="card-body">
                        <h5 class="card-title text-center">@jugadorActual.Nombre</h5>
                    </div>
                </div>

                <!-- BOTONES -->
                <div class="d-flex flex-column gap-2 mt-3" style="max-width: 300px; width: 100%;">
                    @for (int i = 0; i < botonesInfo.Count; i++)
                    {
                        var indice = i;
                        var boton = botonesInfo[i];
                        <button class="btn btn-outline-primary btn-sm w-100 text-start"
                                @onclick="() => AsignarJugador(indice)"
                                disabled="@boton.Asignado">
                            @boton.Texto
                        </button>
                    }
                </div>
            }
        </div>

        <!-- Columna derecha vacía temporal -->
        <div style="width: 250px;">
            <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7571832033912058"
                    crossorigin="anonymous"></script>

            <ins class="adsbygoogle"
                 style="display:block"
                 data-ad-client="ca-pub-7571832033912058"
                 data-ad-slot="7294359987"
                 data-ad-format="auto"
                 data-full-width-responsive="true"></ins>

            <script>
                (adsbygoogle = window.adsbygoogle || []).push({});
            </script>
        </div>
    </div>
}


@code {
    private Jugadores? jugadorActual;
    private List<Jugadores> jugadores = new();
    private List<Jugadores> jugadoresDisponibles = new();
    private Random random = new();
    private List<BotonInfo> botonesInfo = new();
    private bool ruletaActiva = true;
    private bool cargando = true;
    private List<Ganadores> topGanadores = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Inicializar();
            await CargarGanadores();
        }
    }

    private async Task Inicializar()
    {
        cargando = true;
        StateHasChanged();

        jugadores = (await JugadoresService.GetAllAsync())
            .Where(j => j.IdJuegoNavigation.IdJuego == 1)
            .ToList();

        // Copiamos la lista original a la lista de disponibles
        jugadoresDisponibles = new List<Jugadores>(jugadores);

        botonesInfo = new List<BotonInfo>
        {
            new BotonInfo("Kills", "Kills:"),
            new BotonInfo("Kills x2", "Kills x2:"),
            new BotonInfo("Muertes", "Muertes:"),
            new BotonInfo("Muertes x2", "Muertes x2:"),
            new BotonInfo("Asistencias", "Asistencias:"),
            new BotonInfo("Asistencias x2", "Asistencias x2:"),
            new BotonInfo("Descarte", "Descarte:")
        };

        if (jugadoresDisponibles.Count > 0)
        {
            jugadorActual = jugadoresDisponibles[random.Next(jugadoresDisponibles.Count)];
        }

        ruletaActiva = true;
        cargando = false;
        StateHasChanged();
        await Task.Yield();

        await SimularRuletaAsync();
    }

    private async Task CargarGanadores()
    {
        topGanadores = (await GanadoresService.GetTopAsync(5, 1)) // juegoId = 1
            .OrderByDescending(g => g.Puntos)
            .ToList();

        StateHasChanged();
    }

    private async Task SimularRuletaAsync()
    {
        var startTime = DateTime.Now;

        while ((DateTime.Now - startTime).TotalMilliseconds < 1000 && !TodosAsignados() && jugadoresDisponibles.Count > 0)
        {
            jugadorActual = jugadoresDisponibles[random.Next(jugadoresDisponibles.Count)];
            StateHasChanged();
            await Task.Delay(100);
        }

        if (!TodosAsignados() && jugadoresDisponibles.Count > 0)
        {
            jugadorActual = jugadoresDisponibles[random.Next(jugadoresDisponibles.Count)];
            StateHasChanged();
        }

        await Task.Delay(400);

        ruletaActiva = false;
        StateHasChanged();
    }

    private void AsignarJugador(int indiceBoton)
    {
        if (ruletaActiva)
            return;

        if (indiceBoton < 0 || indiceBoton >= botonesInfo.Count)
            return;

        if (jugadorActual == null)
            return;

        var boton = botonesInfo[indiceBoton];
        if (boton.Asignado)
            return;

        int valor = 0;
        string nombreJugador = jugadorActual.Nombre;

        switch (boton.TextoBase)
        {
            case "Kills":
                valor = jugadorActual.Kills;
                break;
            case "Kills x2":
                valor = jugadorActual.Kills * 2;
                break;
            case "Muertes":
                valor = jugadorActual.Muertes;
                break;
            case "Muertes x2":
                valor = jugadorActual.Muertes * 2;
                break;
            case "Asistencias":
                valor = jugadorActual.Asistencias;
                break;
            case "Asistencias x2":
                valor = jugadorActual.Asistencias * 2;
                break;
            case "Descarte":
                valor = 0;
                break;
        }

        boton.Texto = boton.TextoBase + ": " + nombreJugador + (boton.TextoBase == "Descarte" ? "" : " " + valor);
        boton.Asignado = true;
        botonesInfo[indiceBoton] = boton;

        // Eliminar el jugador actual de la lista de disponibles
        jugadoresDisponibles.Remove(jugadorActual);

        // Generar nuevo jugador
        if (!TodosAsignados() && jugadoresDisponibles.Count > 0)
        {
            jugadorActual = jugadoresDisponibles[random.Next(jugadoresDisponibles.Count)];
        }
        else
        {
            jugadorActual = null;
        }

        StateHasChanged();
    }

    private bool TodosAsignados() => botonesInfo.All(b => b.Asignado);

    private class BotonInfo
    {
        public string TextoBase { get; set; }
        public string Texto { get; set; }
        public bool Asignado { get; set; }

        public BotonInfo(string textoBase, string texto)
        {
            TextoBase = textoBase;
            Texto = texto;
            Asignado = false;
        }
    }

    private int CalcularPuntuacion()
    {
        int suma = 0;

        foreach (var boton in botonesInfo)
        {
            if (boton.Asignado && boton.TextoBase != "Descarte")
            {
                var partes = boton.Texto.Split(' ');
                if (partes.Length >= 3 && int.TryParse(partes.Last(), out int valor))
                {
                    suma += valor;
                }
            }
        }

        return suma;
    }

    private void RefrescarPagina()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}
